package com.example.nice.everywhere.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.nice.everywhere.bean.BanmiDaoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANMI_DAO_BEAN".
*/
public class BanmiDaoBeanDao extends AbstractDao<BanmiDaoBean, Long> {

    public static final String TABLENAME = "BANMI_DAO_BEAN";

    /**
     * Properties of entity BanmiDaoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Lid = new Property(0, Long.class, "lid", true, "_id");
        public final static Property Following = new Property(1, int.class, "following", false, "FOLLOWING");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Location = new Property(3, String.class, "location", false, "LOCATION");
        public final static Property Occupation = new Property(4, String.class, "occupation", false, "OCCUPATION");
        public final static Property Photo = new Property(5, String.class, "photo", false, "PHOTO");
    }


    public BanmiDaoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BanmiDaoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANMI_DAO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: lid
                "\"FOLLOWING\" INTEGER NOT NULL ," + // 1: following
                "\"NAME\" TEXT," + // 2: name
                "\"LOCATION\" TEXT," + // 3: location
                "\"OCCUPATION\" TEXT," + // 4: occupation
                "\"PHOTO\" TEXT);"); // 5: photo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANMI_DAO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BanmiDaoBean entity) {
        stmt.clearBindings();
 
        Long lid = entity.getLid();
        if (lid != null) {
            stmt.bindLong(1, lid);
        }
        stmt.bindLong(2, entity.getFollowing());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(4, location);
        }
 
        String occupation = entity.getOccupation();
        if (occupation != null) {
            stmt.bindString(5, occupation);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(6, photo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BanmiDaoBean entity) {
        stmt.clearBindings();
 
        Long lid = entity.getLid();
        if (lid != null) {
            stmt.bindLong(1, lid);
        }
        stmt.bindLong(2, entity.getFollowing());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(4, location);
        }
 
        String occupation = entity.getOccupation();
        if (occupation != null) {
            stmt.bindString(5, occupation);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(6, photo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BanmiDaoBean readEntity(Cursor cursor, int offset) {
        BanmiDaoBean entity = new BanmiDaoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // lid
            cursor.getInt(offset + 1), // following
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // location
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // occupation
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // photo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BanmiDaoBean entity, int offset) {
        entity.setLid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFollowing(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOccupation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhoto(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BanmiDaoBean entity, long rowId) {
        entity.setLid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BanmiDaoBean entity) {
        if(entity != null) {
            return entity.getLid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BanmiDaoBean entity) {
        return entity.getLid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
